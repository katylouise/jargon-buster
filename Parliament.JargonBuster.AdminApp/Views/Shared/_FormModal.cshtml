@model AdminApp.ViewModels.DefinitionViewModel
@{ 
    var actionName = ViewContext.RouteData.Values["action"].ToString();

    List<SelectListItem> houseItems = new List<SelectListItem>();

    houseItems.Add(new SelectListItem { Text = "Bicameral", Value = "Bicameral", Selected = true });

    houseItems.Add(new SelectListItem { Text = "Commons", Value = "Commons" });

    houseItems.Add(new SelectListItem { Text = "Lords", Value = "Lords" });
}

        <div id="#formModal">
            @using (Html.BeginForm(actionName, "Home", FormMethod.Post, new { @class = "modalForm edit-form" }))
            {
                @Html.HiddenFor(m => m.Id)

                <div class="edit-wrapper">
                    <h3 class="edit-title">@actionName Definition </h3>

                    <div class="phrase-edit-form">
                    @Html.LabelFor(m => m.Phrase)
                    @Html.TextBoxFor(m => m.Phrase, new { @class = "formInput edit-term", @id = "phraseTextBox", required = "required", maxLength = 100})
                    @Html.ValidationMessageFor(m => m.Phrase)
                    @if (actionName == "Edit") { <span id="phraseCharLeft">@Model.Phrase.Length</span>}
                    else { <span id="phraseCharLeft">0</span>}/100</div>

                    <div class="definition-edit-form">
                    @Html.LabelFor(m => m.Definition)
                    @Html.TextAreaFor(m => m.Definition, new { @class = "formInput edit-definition", @id = "definitionTextBox", @rows = "10", required = "required" , maxLength = 500})
                    @Html.ValidationMessageFor(m => m.Definition)
                    @if (actionName == "Edit"){ <span id="definitionCharLeft">@Model.Definition.Length</span>}
                    else { <span id="definitionCharLeft">0</span>}/500</div>


                    <div class="edit-alternatives">
                        @if (Model != null && Model.Alternates.Any())
                        {
                            <ul class="edit-alternatives__list">
                                @for (var i = 0; i < Model.Alternates.Count(); i++)
                                {
                                    @Html.HiddenFor(m => m.Alternates[i].Id)
                                    <li id=@i>@Html.TextBoxFor(m => m.Alternates[i].AlternateDefinition, new { @class = "edit-alternatives__term" })</li>
                                }
                            </ul>
                        }
                        else if (Model != null && Model.Alternates.Count == 0)
                        {
                            <ul class="edit-alternatives__list"></ul>
                        }
                        else
                        {
                            <ul class="edit-alternatives__list">
                                <li id="0">@Html.TextBoxFor(m => m.Alternates[0].AlternateDefinition, new { @class = "edit-alternatives__term" })</li>
                            </ul>
                        }

                        <p class="edit-alternatives__add">
                            <img src="~/Content/img/add--blue.png" />
                            <a class="addAlternate" href="#">Add alternative term</a>
                        </p>
                        
                    </div>

                    @Html.DropDownListFor(m => m.House, new SelectList(houseItems, "Value", "Text"), new { @class = "edit-group" })

                    <div class="errorMessage form-error"></div>
                    <p class="publish-disclaimer">By clicking "Publish", your definition will be visible on the website.</p>
                </div>

                <div class="modal-footer edit-submit cf">
                    <button class="btnSave edit-submit__save">Publish</button>
                    <a data-dismiss="modal" class="edit-submit__cancel">Cancel</a>
                </div>
            }
        </div>

